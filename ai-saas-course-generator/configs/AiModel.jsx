/*
 * Install the Generative AI SDK
 *
 * $ npm install @google/generative-ai
 */

const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};


export const GenerateCourseLayout_AI= model.startChat({
    generationConfig,
    // safetySettings: Adjust safety settings
    // See https://ai.google.dev/gemini-api/docs/safety-settings
    history: [
        {
            role: "user",
            parts: [
                { text: "Create A Course On The Following Details with field Course Name,Description,along with Chapter Name,about,Duration:Category:\"Programming\",Topic:Python,Level:Basic,Duration:1hours,NoOfChapters:5,in Json Format" },
            ],
        },
        {
            role: "model",
            parts: [
                { text: "```json\n{\n  \"CourseName\": \"Python Programming for Beginners\",\n  \"Description\": \"This course introduces the fundamental concepts of Python programming, designed for absolute beginners with no prior coding experience. You'll learn the basics of syntax, data types, variables, operators, control flow, and functions, laying a strong foundation for further exploration in Python.\",\n  \"Chapters\": [\n    {\n      \"ChapterName\": \"Introduction to Python\",\n      \"About\": \"Learn about Python's history, its popularity, and why it's a great choice for beginners. We'll also cover how to set up your Python environment.\",\n      \"Duration\": \"15 minutes\"\n    },\n    {\n      \"ChapterName\": \"Basic Syntax and Data Types\",\n      \"About\": \"Dive into the core syntax of Python, including variables, data types (integers, floats, strings, booleans), and basic operations.\",\n      \"Duration\": \"25 minutes\"\n    },\n    {\n      \"ChapterName\": \"Control Flow: Making Decisions\",\n      \"About\": \"Explore conditional statements (if, else, elif) and loops (for, while) to create programs that can make decisions and repeat tasks.\",\n      \"Duration\": \"20 minutes\"\n    },\n    {\n      \"ChapterName\": \"Functions: Reusable Code Blocks\",\n      \"About\": \"Learn to define your own functions to organize code and make it more efficient.\",\n      \"Duration\": \"15 minutes\"\n    },\n    {\n      \"ChapterName\": \"Putting it Together: Simple Projects\",\n      \"About\": \"Apply your newfound knowledge by building small Python programs to solidify your understanding.\",\n      \"Duration\": \"15 minutes\"\n    }\n  ],\n  \"Category\": \"Programming\",\n  \"Topic\": \"Python\",\n  \"Level\": \"Basic\",\n  \"Duration\": \"1 hour\",\n  \"NoOfChapters\": 5\n}\n```\n" },
            ],
        },
    ],
});
export const GenerateChapterContent_AI = model.startChat({
    generationConfig,
 // safetySettings: Adjust safety settings
 // See https://ai.google.dev/gemini-api/docs/safety-settings
    history: [
      {
        role: "user",
        parts: [
          {text: "Explain the concept in Detail On Topic: Python Basic, Chapter: Basics in JSON format with fields as title, description, detail, code example (HTML format) if applicable.`"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"title\": \"Python Basics\",\n  \"description\": \"A fundamental introduction to Python programming.\",\n  \"detail\": \"Python is a versatile, high-level programming language known for its readability and ease of use. It's widely employed in various domains, including web development, data science, machine learning, and scripting. This chapter covers basic Python concepts.\",\n  \"code_example\": {\n    \"html\": \"<code>\\n<h1>Python Basics</h1>\\n<p>This is a simple Python program to print 'Hello, world!'</p>\\n<pre><code>\\nprint('Hello, world!')\\n</code></pre>\\n</code>\"\n  }\n}\n```\n\n## Python Basics in Detail:\n\n**Title:** Python Basics\n\n**Description:** This section provides an introductory overview of Python programming, focusing on its fundamental aspects.\n\n**Detail:**\n\n**1. Introduction:**\n* Python is a dynamically-typed, interpreted programming language known for its simplicity and readability. \n* It emphasizes code clarity and is widely used in various fields due to its vast library ecosystem and a strong community.\n\n**2. Basic Syntax:**\n* **Indentation:** Python uses indentation (spaces or tabs) to define code blocks, making it visually structured and easy to read.\n* **Comments:** Use `#` to add comments for code explanation.\n* **Variables:** Variables store data using an assignment operator `=`.\n* **Data Types:** Python supports various data types:\n    * **Numbers:** Integers (`int`), Floats (`float`), Complex (`complex`)\n    * **Strings:** Text enclosed in single (`'`) or double (`\"`) quotes.\n    * **Booleans:** True or False values.\n    * **Lists:** Ordered collections of elements enclosed in square brackets `[]`.\n    * **Tuples:** Immutable ordered collections enclosed in parentheses `()`.\n    * **Dictionaries:** Key-value pairs enclosed in curly braces `{}`.\n\n**3. Operators:**\n* **Arithmetic Operators:** `+`, `-`, `*`, `/`, `%`, `//`, `**`.\n* **Comparison Operators:** `==`, `!=`, `>`, `<`, `>=`, `<=`.\n* **Logical Operators:** `and`, `or`, `not`.\n* **Assignment Operators:** `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `//=` etc.\n\n**4. Control Flow:**\n* **Conditional Statements:** `if`, `elif`, `else` for decision-making.\n* **Loops:**\n    * `for` loop: Iterates over a sequence.\n    * `while` loop: Executes code as long as a condition is true.\n\n**5. Functions:**\n* Reusable blocks of code that perform specific tasks.\n* Defined using `def` keyword.\n\n**6. Input and Output:**\n* `input()` function: Takes user input from the console.\n* `print()` function: Displays output on the console.\n\n**Code Example (HTML format):**\n\n```html\n<code>\n<h1>Python Basics</h1>\n<p>This is a simple Python program to print 'Hello, world!'</p>\n<pre><code>\nprint('Hello, world!')\n</code></pre>\n</code>\n```\n\n**Further Exploration:**\n\n* **Variables and Data Types:** Learn more about different data types and their operations.\n* **Control Flow:** Practice using conditional statements and loops to create logic.\n* **Functions:** Understand how to define and use functions for code organization and reusability.\n* **Modules and Packages:** Explore Python's vast library ecosystem for external functionality.\n* **Object-Oriented Programming (OOP):** Learn about classes, objects, and inheritance, which are essential for more complex software development.\n\n**Note:** The provided code example is a simple illustration of Python basics. It's highly recommended to explore more elaborate examples and practice writing code to gain a deeper understanding."},
        ],
      },
      {
        role: "user",
        parts: [
          {text: "Explain the concept in Detail On Topic: Python Basic, Chapter: Basics in JSON format with list of an array  fields as title, description,explanation on chapter \n detail, code example (HTML format) if applicable."},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"title\": \"Python Basics\",\n  \"description\": \"A foundational introduction to the Python programming language.\",\n  \"chapter_details\": [\n    {\n      \"title\": \"Introduction to Python\",\n      \"explanation\": \"Python is a high-level, interpreted, general-purpose programming language known for its readability and versatility. It's widely used in various domains, including web development, data science, machine learning, and scripting.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Python Introduction</h1>\\n<p>This program prints 'Hello, world!' to the console.</p>\\n<pre><code>\\nprint('Hello, world!')\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Basic Syntax\",\n      \"explanation\": \"Understanding the fundamental syntax of Python is crucial for writing effective code. This includes indentation, comments, variables, and data types.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Basic Syntax</h1>\\n<p>Example demonstrating variable assignment and printing.</p>\\n<pre><code>\\n# This is a comment\\nmessage = 'Hello, Python!'  # Assigning a string to a variable\\nprint(message)\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Data Types\",\n      \"explanation\": \"Python supports various data types for representing different kinds of information, including numbers, strings, booleans, lists, tuples, and dictionaries.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Data Types</h1>\\n<p>Illustrating different data types in Python.</p>\\n<pre><code>\\n# Numbers\\nnumber = 10\\nfloat_number = 3.14\\n\\n# Strings\\ntext = 'Hello'\\n\\n# Booleans\\nis_true = True\\n\\n# Lists\\nmy_list = [1, 2, 3, 'four']\\n\\n# Tuples\\nmy_tuple = (1, 2, 'three')\\n\\n# Dictionaries\\nmy_dict = {'name': 'Alice', 'age': 30}\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Operators\",\n      \"explanation\": \"Operators perform operations on values and variables. Python offers various operators for arithmetic, comparison, logical operations, and assignments.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Operators</h1>\\n<p>Demonstrating different operator types.</p>\\n<pre><code>\\n# Arithmetic operators\\na = 10\\nb = 5\\nprint(a + b)  # Addition\\nprint(a - b)  # Subtraction\\nprint(a * b)  # Multiplication\\n\\n# Comparison operators\\nprint(a > b)  # Greater than\\nprint(a == b)  # Equal to\\n\\n# Logical operators\\nprint(a > 5 and b < 10)  # Logical AND\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Control Flow\",\n      \"explanation\": \"Control flow statements allow for executing code blocks conditionally or repeatedly based on specific conditions. This includes if-else statements and loops.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Control Flow</h1>\\n<p>Example of conditional statement and loop.</p>\\n<pre><code>\\n# If-else statement\\nage = 25\\nif age >= 18:\\n  print('You are an adult')\\nelse:\\n  print('You are a minor')\\n\\n# For loop\\nfor i in range(5):\\n  print(i)\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Functions\",\n      \"explanation\": \"Functions are reusable blocks of code that perform specific tasks. They help in code organization and reusability.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Functions</h1>\\n<p>Defining and calling a function.</p>\\n<pre><code>\\ndef greet(name):\\n  print('Hello, ' + name + '!')\\n\\ngreet('Bob')\\n</code></pre>\\n</code>\"\n      }\n    },\n    {\n      \"title\": \"Input and Output\",\n      \"explanation\": \"Python provides ways to interact with the user, taking input from the console and displaying output using functions like `input()` and `print()`.\",\n      \"code_example\": {\n        \"html\": \"<code>\\n<h1>Input and Output</h1>\\n<p>Taking user input and displaying output.</p>\\n<pre><code>\\nname = input('Enter your name: ')\\nprint('Hello, ' + name + '!')\\n</code></pre>\\n</code>\"\n      }\n    }\n  ]\n}\n```\n\n## Python Basics: Chapter Details\n\nThis JSON structure provides a detailed outline of a Python Basics chapter, broken down into several subtopics with explanations and code examples.\n\n**1. Introduction to Python:**\n\n* **Title:** Introduction to Python\n* **Explanation:**  A brief overview of Python's nature, its popularity, and its applications in various domains.\n* **Code Example:** A simple \"Hello, world!\" program demonstrating basic print functionality.\n\n**2. Basic Syntax:**\n\n* **Title:** Basic Syntax\n* **Explanation:** Explains the essential syntax elements of Python, including indentation, comments, variable assignment, and data types.\n* **Code Example:** Shows an example of variable assignment with a comment and printing the variable's value.\n\n**3. Data Types:**\n\n* **Title:** Data Types\n* **Explanation:** Describes the various data types available in Python, covering numbers (integers, floats), strings, booleans, lists, tuples, and dictionaries.\n* **Code Example:** Provides an example illustrating the use of different data types in Python.\n\n**4. Operators:**\n\n* **Title:** Operators\n* **Explanation:**  Covers the different types of operators in Python, including arithmetic, comparison, logical, and assignment operators.\n* **Code Example:** Demonstrates the use of operators with examples of addition, subtraction, comparison, and logical operations.\n\n**5. Control Flow:**\n\n* **Title:** Control Flow\n* **Explanation:** Explains how control flow statements like `if-else` and loops (`for` and `while`) are used to control the execution of code.\n* **Code Example:** Shows examples of using `if-else` statements for decision-making and `for` loops for iteration.\n\n**6. Functions:**\n\n* **Title:** Functions\n* **Explanation:** Discusses the concept of functions as reusable blocks of code, emphasizing their benefits for code organization and reusability.\n* **Code Example:** Demonstrates how to define a function and call it to perform a specific task.\n\n**7. Input and Output:**\n\n* **Title:** Input and Output\n* **Explanation:** Explains how to interact with the user using the `input()` function to take input and the `print()` function to display output.\n* **Code Example:** Provides an example of taking user input, processing it, and displaying output.\n\n**Note:**  The JSON format offers a structured and organized way to represent the content of the \"Python Basics\" chapter. This format is easily parseable by programs, making it suitable for dynamic content creation, educational resources, and API integrations. \n"},
        ],
      },
      {
        role: "user",
        parts: [
          {text: "Explain the concept in Detail On Topic: Python Basic, Chapter: Basics in JSON format with list of an array fields as title, description,explanation on chapter\ndetail, code example (code field in <precode>\n format) if applicable."},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"title\": \"Python Basics\",\n  \"description\": \"A foundational introduction to the Python programming language.\",\n  \"chapter_details\": [\n    {\n      \"title\": \"Introduction to Python\",\n      \"explanation\": \"Python is a high-level, interpreted, general-purpose programming language known for its readability and versatility. It's widely used in various domains, including web development, data science, machine learning, and scripting.\",\n      \"code_example\": \"<pre><code>\\nprint('Hello, world!')\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Basic Syntax\",\n      \"explanation\": \"Understanding the fundamental syntax of Python is crucial for writing effective code. This includes indentation, comments, variables, and data types.\",\n      \"code_example\": \"<pre><code>\\n# This is a comment\\nmessage = 'Hello, Python!'  # Assigning a string to a variable\\nprint(message)\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Data Types\",\n      \"explanation\": \"Python supports various data types for representing different kinds of information, including numbers, strings, booleans, lists, tuples, and dictionaries.\",\n      \"code_example\": \"<pre><code>\\n# Numbers\\nnumber = 10\\nfloat_number = 3.14\\n\\n# Strings\\ntext = 'Hello'\\n\\n# Booleans\\nis_true = True\\n\\n# Lists\\nmy_list = [1, 2, 3, 'four']\\n\\n# Tuples\\nmy_tuple = (1, 2, 'three')\\n\\n# Dictionaries\\nmy_dict = {'name': 'Alice', 'age': 30}\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Operators\",\n      \"explanation\": \"Operators perform operations on values and variables. Python offers various operators for arithmetic, comparison, logical operations, and assignments.\",\n      \"code_example\": \"<pre><code>\\n# Arithmetic operators\\na = 10\\nb = 5\\nprint(a + b)  # Addition\\nprint(a - b)  # Subtraction\\nprint(a * b)  # Multiplication\\n\\n# Comparison operators\\nprint(a > b)  # Greater than\\nprint(a == b)  # Equal to\\n\\n# Logical operators\\nprint(a > 5 and b < 10)  # Logical AND\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Control Flow\",\n      \"explanation\": \"Control flow statements allow for executing code blocks conditionally or repeatedly based on specific conditions. This includes if-else statements and loops.\",\n      \"code_example\": \"<pre><code>\\n# If-else statement\\nage = 25\\nif age >= 18:\\n  print('You are an adult')\\nelse:\\n  print('You are a minor')\\n\\n# For loop\\nfor i in range(5):\\n  print(i)\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Functions\",\n      \"explanation\": \"Functions are reusable blocks of code that perform specific tasks. They help in code organization and reusability.\",\n      \"code_example\": \"<pre><code>\\ndef greet(name):\\n  print('Hello, ' + name + '!')\\n\\ngreet('Bob')\\n</code></pre>\"\n    },\n    {\n      \"title\": \"Input and Output\",\n      \"explanation\": \"Python provides ways to interact with the user, taking input from the console and displaying output using functions like `input()` and `print()`.\",\n      \"code_example\": \"<pre><code>\\nname = input('Enter your name: ')\\nprint('Hello, ' + name + '!')\\n</code></pre>\"\n    }\n  ]\n}\n```\n\nThis JSON structure represents a Python Basics chapter, broken down into several subtopics with explanations and code examples. Each subtopic is stored as an object within an array called \"chapter_details\". Here's a breakdown of the key fields:\n\n**1. title:**  The main title of the chapter, for example, \"Python Basics\".\n\n**2. description:**  A brief overview of the chapter's content, for example, \"A foundational introduction to the Python programming language.\"\n\n**3. chapter_details:** An array of objects, each representing a subtopic within the chapter. Each object contains the following fields:\n\n* **title:** The title of the subtopic, for example, \"Introduction to Python\", \"Data Types\", etc.\n* **explanation:** A detailed explanation of the concept covered in the subtopic. \n* **code_example:** A code example related to the subtopic, enclosed within `<pre><code>` tags for proper formatting and highlighting in HTML.\n\n**Example Usage:**\n\nThis JSON structure can be used for various purposes:\n\n* **Generating Educational Content:**  The data can be used to dynamically generate HTML pages for an online tutorial or a learning platform.\n* **API Integration:**  The JSON can be used as a data source for APIs that provide Python learning content or programming challenges.\n* **Documentation:** The JSON structure provides a structured way to organize and store information about a Python Basics chapter, making it suitable for documentation purposes.\n\n**Note:** The `code_example` field now includes the `<pre><code>` tags to represent the code snippet correctly within an HTML context. This ensures that the code is presented with proper formatting, syntax highlighting, and indentation when displayed in an HTML environment. \n"},
        ],
      },
    ],
  });



